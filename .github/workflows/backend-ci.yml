name: chaine CI/CD Microservice R√©servation

on:
  push:
    branches: [main]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: mbrabaa2023/reservation
  DB_URL: ${{ secrets.NEON_PROD_DB_URL }}
  CONTAINER_NAME: microservice_reservation
  PORT: 3004

jobs:
  build:
    name: Build
    runs-on: self-hosted  
    outputs:
      build-artifact: ${{ steps.upload-artifact.outputs.artifact-name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4  
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci --production=false
        
      - name: Build project
        working-directory: ./backend
        run: |
          npm run build || echo "Aucun script build trouv√© - poursuite du workflow"
          
      - name: Create build artifact
        working-directory: ./backend
        run: |
          mkdir -p dist/
          cp -r package*.json server.js Dockerfile dist/
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        id: upload-artifact
        with:
          name: backend-build
          path: ./backend/dist/
          retention-days: 1

  test:
    name: Unit Tests
    needs: build
    runs-on: self-hosted
    env:
      DB_CONNECTION_STRING: ${{ secrets.NEON_PROD_DB_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run unit tests
        working-directory: ./backend
        run: npm test

  build-and-push:
    needs: [build, test]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üîë Authentification Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: üì• R√©cup√©rer l'artefact de build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./docker-build

      - name: üê≥ Build et Push Docker
        run: |
          cd docker-build
          docker build \
            -t $DOCKER_IMAGE:latest \
            -t $DOCKER_IMAGE:$GITHUB_SHA \
            .
          
          docker push $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:$GITHUB_SHA

  deploy:
    name: üöÄ D√©ploiement Docker
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Arr√™ter et supprimer le conteneur existant
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true

      - name: Puller la derni√®re image
        run: docker pull ${{ env.DOCKER_IMAGE }}:latest

      - name: Cr√©er et d√©marrer le conteneur
        run: |
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            -p ${{ env.PORT }}:3004 \
            -e DB_CONNECTION_STRING="${{ secrets.NEON_PROD_DB_URL }}" \
            ${{ env.DOCKER_IMAGE }}:latest

      - name: V√©rifier le statut du conteneur
        run: |
          sleep 10  # Attendre le d√©marrage
          docker ps -f name=${{ env.CONTAINER_NAME }}
          docker logs ${{ env.CONTAINER_NAME }} --tail 50