name: Chaine CI/CD Microservice Réservation

on:
  push:
    branches: [main]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: mbrabaa2023/reservation
  DB_URL: ${{ secrets.NEON_PROD_DB_URL }}
  CONTAINER_NAME: microservice_reservation
  PORT: 3004

jobs:
  build:
    name: Build
    runs-on: self-hosted  
    outputs:
      build-artifact: ${{ steps.upload-artifact.outputs.artifact-name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4  
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci --production=false
        
      - name: Build project
        working-directory: ./backend
        run: |
          npm run build || echo "Aucun script build trouvé - poursuite du workflow"
          
      - name: Create build artifact
        working-directory: ./backend
        run: |
          mkdir -p dist/
          # Copiez ici les fichiers nécessaires pour le build Docker
          cp -r package*.json server.js Dockerfile dist/
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        id: upload-artifact
        with:
          name: backend-build
          path: ./backend/dist/
          retention-days: 1

  test:
    name: Unit Tests
    needs: build
    runs-on: self-hosted
    env:
      DB_CONNECTION_STRING: ${{ secrets.NEON_PROD_DB_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run unit tests
        working-directory: ./backend
        run: npm test

  build-and-push:
    needs: [build, test]
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: 🔑 Authentification Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: 📥 Récupérer l'artefact de build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./docker-build

      - name: 🐳 Build et Push Docker
        run: |
          cd docker-build
          docker build \
            -t $DOCKER_IMAGE:latest \
            -t $DOCKER_IMAGE:$GITHUB_SHA \
            .
          
          docker push $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:$GITHUB_SHA

  deploy-docker:
    name: 🚀 Déploiement Docker
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Arrêter et supprimer le conteneur existant
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true

      - name: Puller la dernière image
        run: docker pull ${{ env.DOCKER_IMAGE }}:latest

      - name: Créer et démarrer le conteneur
        run: |
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            -p ${{ env.PORT }}:3004 \
            -e DB_CONNECTION_STRING="${{ secrets.NEON_PROD_DB_URL }}" \
            ${{ env.DOCKER_IMAGE }}:latest

      - name: Vérifier le statut du conteneur
        run: |
          sleep 10  # Attendre le démarrage
          docker ps -f name=${{ env.CONTAINER_NAME }}
          docker logs ${{ env.CONTAINER_NAME }} --tail 50

  deploy-k3s:
    name: 🚀 Déploiement Kubernetes (k3s)
    needs: build-and-push  # Modifié pour dépendre directement de build-and-push
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.K3S_KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify cluster access
        run: kubectl cluster-info

      - name: Verify frontend namespace exists
        run: |
          if ! kubectl get namespace frontend; then
            echo "Le namespace frontend n'existe pas"
            exit 1
          fi

      - name: Apply Kubernetes manifests
        working-directory: ./k8s
        run: |
          kubectl apply -k . --namespace=frontend || \
          kubectl apply -f deployment.yaml -f service.yaml -f secret.yaml --namespace=frontend

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/reservation-app -n frontend
          kubectl get pods -n frontend -l app=reservation